version: 2.1

orbs: 
  slack: circleci/slack@4.9.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws --region us-east-1 s3 rm s3://udapeople-<<parameters.workflowid>> --recursive
            aws cloudformation delete-stack --region us-east-1 --stack-name udapeople-backend-<<parameters.workflowid>>
            aws cloudformation delete-stack --region us-east-1 --stack-name udapeople-frontend-<<parameters.workflowid>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowid:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # Example: kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/RaN3f8hRR1yaFcxzn1Xcgm/migration_<<parameters.workflowid>>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Front-End scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: s
            - backend-build
      - run:
          name: Back-End scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:7c:07:e2:a6:c6:af:4d:6a:5e:a3:e3:62:63:b6:dd"]
      - run:
          name: Install dependencies
          command: yum install -y tar gzip    
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws --region us-east-1 ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"    

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:7c:07:e2:a6:c6:af:4d:6a:5e:a3:e3:62:63:b6:dd"]
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook -i inventory.txt configure-server.yml
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:7c:07:e2:a6:c6:af:4d:6a:5e:a3:e3:62:63:b6:dd"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash or kvdb
          command: |
            if grep -q "has been executed successfully." ~/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "RaN3f8hRR1yaFcxzn1Xcgm" in your local terminal first
                curl https://kvdb.io/RaN3f8hRR1yaFcxzn1Xcgm/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                curl https://kvdb.io/RaN3f8hRR1yaFcxzn1Xcgm/oldworkflowid -d ${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"     

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:7c:07:e2:a6:c6:af:4d:6a:5e:a3:e3:62:63:b6:dd"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update curl tar
            npm install webpack-dev-server -g
            npm install
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text \
            --query 'Reservations[*].Instances[*].PublicDnsName')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            curl https://kvdb.io/RaN3f8hRR1yaFcxzn1Xcgm/backendip -d ${API_URL}
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"    
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:7c:07:e2:a6:c6:af:4d:6a:5e:a3:e3:62:63:b6:dd"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli

            echo .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            # cd backend
            # npm i
            # npm run build
            # cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files

            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook -i inventory.txt deploy-backend.yml
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}" 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(curl https://kvdb.io/RaN3f8hRR1yaFcxzn1Xcgm/backendip)
            echo ${BACKEND_URL}
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text \
            --query 'Reservations[*].Instances[*].PublicDnsName')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:7c:07:e2:a6:c6:af:4d:6a:5e:a3:e3:62:63:b6:dd"]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:7c:07:e2:a6:c6:af:4d:6a:5e:a3:e3:62:63:b6:dd"]
      - run:
          name: Get old stack workflow id
          command: |
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"   
      - run:
          name: Remove old stacks and files
          command: |
            for stackitem in ${STACKS[@]}
            do 
              if [[ $stackitem =~ "${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                ẹcho "--------------- CLEAN ---------------"
                unset OldWorkflowID
                OldWorkflowID=$(echo $stackitem | sed -r 's/udapeople-.*-//g')
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
                ẹcho "--------------- CANNOT CLEAN ---------------"
              fi
            done
      - slack/notify:
          event: pass
          template: basic_success_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]